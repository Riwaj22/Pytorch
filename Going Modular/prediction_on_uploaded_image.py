# -*- coding: utf-8 -*-
"""Prediction on uploaded image

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18qa2jn-hqtruz0VASslrP0YwhlwPr7n7
"""

import torch
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

import torch
from torchvision import transforms
from PIL import Image
import ipywidgets as widgets
from IPython.display import display
from io import BytesIO

class ImagePredictor:
    def __init__(self, model, custom_labels):
        self.model = model.to('cpu')
        self.custom_labels = custom_labels
        self.preprocess = transforms.Compose([
            transforms.Resize(size=(224, 224)),
            transforms.ToTensor(),
        ])

    def predict_image(self, upload_widget):
        # Get the uploaded image
        uploaded_image = upload_widget.data[-1]

        # Display the uploaded image
        display(Image.open(BytesIO(uploaded_image)))

        # Preprocess the image
        input_image = Image.open(BytesIO(uploaded_image)).convert("RGB")
        input_tensor = self.preprocess(input_image)
        input_batch = input_tensor.unsqueeze(dim=0)  # Add a batch dimension

        # Move input tensor to CPU
        input_batch = input_batch.to('cpu')

        # Perform inference
        with torch.no_grad():
            output = self.model(input_batch)

        # Get the predicted label index and confidence
        _, predicted_idx = torch.max(output, 1)
        confidence = torch.nn.functional.softmax(output[0], dim=0)[predicted_idx.item()].item() * 100

        # Map the predicted index to a custom label or provide a default label
        if predicted_idx.item() < len(self.custom_labels):
            predicted_label = self.custom_labels[predicted_idx.item()]
        else:
            predicted_label = f"Unknown Class {predicted_idx.item()}"

        # Display the predicted label and confidence
        print(f"Predicted label: {predicted_label} with confidence: {confidence:.2f}%")

def create_upload_button(image_predictor):
    # Create an upload button
    upload_btn = widgets.FileUpload()
    upload_btn.observe(lambda change: image_predictor.predict_image(upload_btn), names='value')

    # Display the upload button
    display(upload_btn)

# Example usage:
# Assuming 'model_0' is your pre-trained model and 'custom_labels' is your list of labels
# model_0_predictor = ImagePredictor(model=model_0, custom_labels=['pizza', 'steak', 'sushi'])
# create_upload_button(model_0_predictor)

